OpenLayers.Control.ExportMap=OpenLayers.Class(OpenLayers.Control,{type:OpenLayers.Control.TYPE_BUTTON,canvasComponents:[],tileData:{},trigger:function(a){return this.setUpCanvas(a),this.canvasComponents=[],this.tileData={},this.map.layers.forEach(function(a){a.visibility&&(a instanceof OpenLayers.Layer.Vector?this.exportVectorLayer(a):a instanceof OpenLayers.Layer.Grid&&this.exportGridLayer(a))}.bind(this)),this.canvas},setUpCanvas:function(a){a?this.canvas=a:this.canvas=document.createElement("canvas"),this.canvasContext=this.canvas.getContext("2d"),this.canvas.width=this.map.viewPortDiv.clientWidth,this.canvas.height=this.map.viewPortDiv.clientHeight},exportVectorLayer:function(a){if(a.renderer instanceof OpenLayers.Renderer.Canvas){var b=a.renderer;if(null!==b.canvas){var c=b.canvas;this.canvasComponents.push(c.canvas)}}},exportGridLayer:function(a){this.offsetX=parseInt(this.map.layerContainerDiv.style.left),this.offsetY=parseInt(this.map.layerContainerDiv.style.top),this.stitchTiles(a)},stitchTiles:function(a){var b=this;this.imagePromises=[],a.grid.forEach(function(c){c.forEach(function(c){var d=a.getURL(c.bounds);b.tileData[d]||(b.tileData[d]={x:c.position.x+b.offsetX,y:c.position.y+b.offsetY}),b.imagePromises.push(new Promise(function(a,c){b.loadImage(a,d)}))})}),Promise.all(this.imagePromises).then(function(){b.drawLoadedImages()})},loadImage:function(a,b){var c=new Image,d=this;c.onload=function(){d.canvasComponents.unshift(this),a(c)},c.src=b},drawLoadedImages:function(){var a=this;this.canvasComponents.forEach(function(b){if(b.toString().indexOf("HTMLCanvasElement")>-1)return a.drawCanvasComponent(b,0,0),!0;var c=a.tileData[b.src];a.drawCanvasComponent(b,c.x,c.y)})},drawCanvasComponent:function(a,b,c){this.canvasContext.drawImage(a,b,c)},CLASS_NAME:"OpenLayers.Control.ExportMap"});